buildscript {
    ext {
        springBootVersion = '2.2.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.6.2'
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.2.1")
    }
}

plugins {
    id 'jacoco'
    id 'net.ltgt.apt' version '0.10'
    id 'org.sonarqube' version '2.8'
    id "org.owasp.dependencycheck" version "5.3.2.1"
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compile group: 'org.apache.poi', name: 'poi', version: '4.0.0'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.0.0'
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile group: 'com.google.guava', name: 'guava', version: '12.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    archiveName 'ecm-common.jar'
}
group 'uk.gov.hmcts.reform'
version '0.0.1'

def sonarExclusions = ['**/uk/gov/hmcts/ethos/replacement/docmosis/config/**',
                       '**/uk/gov/hmcts/ethos/replacement/docmosis/model/**',
                       '**/uk/gov/hmcts/reform/ethos/replacement/docmosis/CaseOrchestrationApplication'
]

sonarqube {
    println "echo sonarqube"
    properties {
        property "sonar.exclusions", sonarExclusions.join(', ')
        property "sonar.projectKey", "ecm-common"
        property "sonar.dynamicAnalysis", "reuseReports"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sourceSets {
    test {
        java.srcDir 'src/test/java'
    }
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}
